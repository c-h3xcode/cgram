// AUTOGENERATED BY CGRAM_GENERATOR
// Parser for {{ type.name }} type
// API VERSION: {{ api.version }}
// API RELEASE DATE: {{ api.release_date }}
// API CHANGELOG: {{ api.changelog }}

#include <cJSON.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#include <cgram/parser.h>
#include <cgram/types/{{ type.name }}.h>

{% for dependency in type.dependencies %}
#include <cgram/types/{{ dependency }}.h>
{% endfor %}

parse_func_def({{ type.name }}) {
  if (json == NULL) {
    if (error != NULL && !suppress_error) {
      error->code = CGRAME_ERROR;
      error->description = "Expected {{ type.name }} object, got NULL";
    }
    return NULL;
  }

  type({{ type.name }}) *{{ type.name|lower }} = malloc(sizeof(type({{ type.name }})));
  bool internal_error = false;

  if (error == NULL || suppress_error) {
    error = malloc(sizeof(cgram_error_t));
    internal_error = true;
  }

  {% for field in type.fields %}
  {% if field.type.cgram_type %}

  cJSON *{{ field.name }} = cJSON_GetObjectItemCaseSensitive(json, "{{ field.name }}");
  {% if field.type.pointer_deepness == 1 %}
  {{ type.name|lower }}->{{ field.name }} = parse_func({{ field.type.name }})({{ field.name }}, error, {{ "false" if field.required else "true" }});
  {% else %}
  {{ type.name|lower }}->{{ field.name }} = parse_{{ "array_" * (field.type.pointer_deepness-1) }}func({{ field.type.name }})({{ field.name }}, error, {{ "false" if field.required else "true" }});
  {% endif %}

  {% else %}
  {{ type.name|lower }}->{{ field.name }} = {{ field.parser_function }}(json, "{{ field.name }}", error, {{ "false" if field.required else "true" }});
  {% endif %}
  {% endfor %}

  if (error->code != CGRAME_ERROR) {
    error->code = CGRAME_OK;
  }

  if (internal_error) {
    free(error);
  }

  return {{ type.name|lower }};
}

parse_array_func_def({{ type.name }}) {
  type({{ type.name }}) **{{ type.name|lower }}_array = malloc(sizeof(type({{ type.name }})*) * cJSON_GetArraySize(json));
  bool internal_error = false;

  if (error == NULL || suppress_error) {
    error = malloc(sizeof(cgram_error_t));
    internal_error = true;
  }

  cJSON *element;
  int i = 0;
  cJSON_ArrayForEach(element, json) {
    {{ type.name|lower }}_array[i] = parse_func({{ type.name }})(element, error, suppress_error);
    i++;
  }

  if (error->code != CGRAME_ERROR) {
    error->code = CGRAME_OK;
  }

  if (internal_error) {
    free(error);
  }

  return {{ type.name|lower }}_array;
}


parse_array_array_func_def({{ type.name }}) {
  type({{ type.name }}) ***{{ type.name|lower }}_array = malloc(sizeof(type({{ type.name }})**) * cJSON_GetArraySize(json));
  bool internal_error = false;

  if (error == NULL || suppress_error) {
    error = malloc(sizeof(cgram_error_t));
    internal_error = true;
  }

  cJSON *element;
  int i = 0;
  cJSON_ArrayForEach(element, json) {
    {{ type.name|lower }}_array[i] = parse_array_func({{ type.name }})(element, error, suppress_error);
    i++;
  }

  if (error->code != CGRAME_ERROR) {
    error->code = CGRAME_OK;
  }

  if (internal_error) {
    free(error);
  }

  return {{ type.name|lower }}_array;
}


to_json_func_def({{ type.name }}) {
  if ({{ type.name|lower }} == NULL) {
    if (error != NULL && !suppress_error) {
      error->code = CGRAME_ERROR;
      error->description = "Expected {{ type.name }} object, got NULL";
    }
    return NULL;
  }

  cJSON *json = cJSON_CreateObject();
  bool internal_error = false;

  if (error == NULL || suppress_error) {
    error = malloc(sizeof(cgram_error_t));
    internal_error = true;
  }

  {% for field in type.fields %}
  {% if field.type.cgram_type %}
  {% if field.type.pointer_deepness == 1 %}
  cJSON_AddItemToObject(json, "{{ field.name }}", to_json_func({{ field.type.name }})({{ type.name|lower }}->{{ field.name }}, error, {{ "false" if field.required else "true" }}));
  {% else %}
  cJSON_AddItemToObject(json, "{{ field.name }}", to_array_json_func({{ field.type.name }})({{ type.name|lower }}->{{ field.name }}, error, {{ "false" if field.required else "true" }}));
  {% endif %}
  {% else %}
  cJSON_AddItemToObject(json, "{{ field.name }}", {{ field.to_json_function }}({{ type.name|lower }}->{{ field.name }}, error, {{ "false" if field.required else "true" }}));
  {% endif %}
  {% endfor %}

  if (error->code != CGRAME_ERROR) {
    error->code = CGRAME_OK;
  }

  if (internal_error) {
    free(error);
  }

  return json;
}
